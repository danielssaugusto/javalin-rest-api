/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import io.javalin.Javalin;

import java.time.Instant;
import java.util.*;
import java.nio.file.*;
import java.io.IOException;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.type.TypeReference;

public class App {

    private static final String ARQUIVO_USUARIOS = "usuarios.json";
    private static final String ARQUIVO_TAREFAS = "tarefas.json";

    private static ObjectMapper objectMapper = new ObjectMapper();

    private static List<Usuario> usuarios = carregarUsuarios();
    private static List<Tarefa> tarefas = carregarTarefas();

    public static List<Usuario> carregarUsuarios() {
        try {
            byte[] jsonData = Files.readAllBytes(Paths.get(ARQUIVO_USUARIOS));
            return objectMapper.readValue(jsonData, new TypeReference<List<Usuario>>() {});
        } catch (IOException e) {
            // Se arquivo não existir ou erro, retorna lista vazia
            return new ArrayList<>();
        }
    }

    public static void salvarUsuarios() {
        try {
            objectMapper.writerWithDefaultPrettyPrinter()
                    .writeValue(Paths.get(ARQUIVO_USUARIOS).toFile(), usuarios);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static List<Tarefa> carregarTarefas() {
        try {
            byte[] jsonData = Files.readAllBytes(Paths.get(ARQUIVO_TAREFAS));
            return objectMapper.readValue(jsonData, new TypeReference<List<Tarefa>>() {});
        } catch (IOException e) {
            return new ArrayList<>();
        }
    }

    public static void salvarTarefas() {
        try {
            objectMapper.writerWithDefaultPrettyPrinter()
                    .writeValue(Paths.get(ARQUIVO_TAREFAS).toFile(), tarefas);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Javalin app = Javalin.create().start(7000);

        app.get("/hello", ctx -> ctx.result("Hello, Javalin!"));

        app.get("/status", ctx -> {
            Map<String, String> status = new HashMap<>();
            status.put("status", "ok");
            status.put("timestamp", Instant.now().toString());
            ctx.json(status);
        });

        app.post("/echo", ctx -> {
            @SuppressWarnings("unchecked")
            Map<String, Object> body = ctx.bodyAsClass(Map.class);
            ctx.json(body);
        });

        app.get("/saudacao/{nome}", ctx -> {
            String nome = ctx.pathParam("nome");
            ctx.json(Map.of("mensagem", "Olá, " + nome + "!"));
        });

        app.post("/usuarios", ctx -> {
            Usuario user = ctx.bodyAsClass(Usuario.class);
            usuarios.add(user);
            salvarUsuarios();
            ctx.status(201);
        });

        app.get("/usuarios", ctx -> ctx.json(usuarios));

        app.get("/usuarios/{email}", ctx -> {
            String email = ctx.pathParam("email");
            Optional<Usuario> usuario = usuarios.stream()
                    .filter(u -> u.email.equals(email))
                    .findFirst();

            if (usuario.isPresent()) {
                ctx.json(usuario.get());
            } else {
                ctx.status(404);
            }
        });

        // Tarefas
        app.post("/tarefas", ctx -> {
            Tarefa tarefa = ctx.bodyAsClass(Tarefa.class);
            tarefas.add(tarefa);
            salvarTarefas();
            ctx.status(201);
        });

        app.get("/tarefas", ctx -> ctx.json(tarefas));

        app.get("/tarefas/{id}", ctx -> {
            String id = ctx.pathParam("id");
            Optional<Tarefa> tarefa = tarefas.stream()
                    .filter(t -> t.id.equals(id))
                    .findFirst();
            if (tarefa.isPresent()) {
                ctx.json(tarefa.get());
            } else {
                ctx.status(404);
            }
        });
    }
}
